#version 450

const vec3 ico[]=
{
	vec3(0.525731f, 0, 0.850651f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, 0.525731f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0, 0.850651f, -0.525731f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(0, -0.850651f, -0.525731f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, 0.525731f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, 0.525731f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(0, 0.850651f, -0.525731f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, -0.525731f),
	vec3(-0.525731f, 0, -0.850651f)
};

layout (binding=0) uniform MainUBO
{
	mat4 HMD;
	mat4 projection;
    mat4 modelview;
	mat4 lightMVP;
	vec4 lightColor;
	vec4 lightDirection;
};

out gl_PerVertex
{
    vec4 gl_Position;
};

layout (location=0) out vec3 Position;

void main()
{
	vec3 vPosition=ico[gl_VertexIndex];

	gl_Position=projection*HMD*modelview*vec4(vPosition, 0.0);
	Position=normalize(vPosition);
}
