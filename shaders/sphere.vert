#version 450

const vec3 ico[]=
{
	vec3(0.525731f, 0, 0.850651f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0, 0.850651f, -0.525731f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, 0.525731f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.850651f, 0.525731f, 0),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(0, 0.850651f, -0.525731f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0, -0.850651f, -0.525731f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(0.525731f, 0, -0.850651f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, 0.525731f),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, -0.525731f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(0, -0.850651f, 0.525731f),
	vec3(0.525731f, 0, 0.850651f),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(0.850651f, -0.525731f, 0),
	vec3(0.525731f, 0, 0.850651f),
	vec3(0, -0.850651f, 0.525731f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(-0.525731f, 0, 0.850651f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(0, 0.850651f, -0.525731f),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(-0.850651f, 0.525731f, 0),
	vec3(-0.850651f, -0.525731f, 0),
	vec3(-0.525731f, 0, -0.850651f),
	vec3(0, -0.850651f, -0.525731f)
};

layout(push_constant) uniform ubo
{
	mat4 mvp;
	vec4 color;
};

out gl_PerVertex
{
    vec4 gl_Position;
};

layout(location=0) out vec4 Color;

void main()
{
	vec3 vPosition=ico[gl_VertexIndex];

	gl_Position=mvp*vec4(vPosition.xyz, 1.0);
	Color=color*normalize(vPosition.xyzz*0.5+0.5);
}
